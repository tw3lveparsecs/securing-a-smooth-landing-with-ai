name: deploy

on:
  workflow_call:
    inputs:
      environment:
        description: "github environment for deployment jobs"
        type: string
        required: true
      location:
        description: "location for resource deployment"
        type: string
        default: ""
      subscription_id:
        description: "azure subscription id used for deployments"
        type: string
        default: ""
      template_file_name:
        description: "name of the template file to be deploy (assume its been built from bicep into json)"
        type: string
        required: false
      deployment_name:
        description: "name of the arm deployment"
        type: string
        required: true
      az_deployment_type:
        description: "type of azure deployment"
        type: string
        required: false
        default: subscription
      mode:
        description: "the contextual mode of the deployment, either deploy or operations"
        type: string
        required: false
        default: deploy
      management_group_id:
        description: "management group id for azure deployment"
        type: string
        required: false
        default: ""
      resource_group_name:
        description: "resource group name for azure deployment"
        type: string
        required: false
        default: ""
      oidc_app_reg_client_id:
        description: "client id of the azure application registration used to authenticate to azure using oidc, refer to https://learn.microsoft.com/en-us/azure/active-directory/develop/workload-identity-federation-create-trust?pivots=identity-wif-apps-methods-azp#github-actions"
        type: string
        required: true
      azure_tenant_id:
        description: "azure ad tenant/directory id"
        type: string
        required: true

jobs:
  run_deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: deploy
          path: ${{ github.workspace }}/deploy

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ inputs.oidc_app_reg_client_id }}
          tenant-id: ${{ inputs.azure_tenant_id }}
          allow-no-subscriptions: true

      - name: Deploy to Azure
        if: inputs.mode == 'deploy'
        run: |
          $ErrorActionPreference = 'stop'
          $paramFile = Get-ChildItem ${{ github.workspace }}/deploy | Where-Object {$_.Name -like "*.parameters.json"}
          $template = "${{ inputs.template_file_name }}".Replace(".bicep",".json")

          if ('${{ inputs.az_deployment_type }}' -eq 'subscription' ){
            az account set --subscription ${{ inputs.subscription_id}}
            az deployment sub create `
              --name '${{ inputs.deployment_name }}' `
              --location '${{ inputs.location }}' `
              --subscription '${{ inputs.subscription_id }}' `
              --template-file ${{ github.workspace }}/deploy/$template --parameters $paramFile
          }
          if ('${{ inputs.az_deployment_type }}' -eq 'tenant' ){
            az deployment tenant create `
              --name '${{ inputs.deployment_name }}' `
              --location '${{ inputs.location }}' `
              --template-file ${{ github.workspace }}/deploy/$template --parameters $paramFile
          }
          if ('${{ inputs.az_deployment_type }}' -eq 'managementgroup'){
          az deployment mg create `
            --name '${{ inputs.deployment_name }}' `
            --location '${{ inputs.location }}' `
            --management-group-id '${{ inputs.management_group_id }}' `
            --template-file ${{ github.workspace }}/deploy/$template --parameters $paramFile
          }
          if ('${{ inputs.az_deployment_type }}' -eq 'resourcegroup' ){
            az account set --subscription '${{ inputs.subscription_id }}'
            az deployment group create `
              --name '${{ inputs.deployment_name }}' `
              --resource-group '${{ inputs.resource_group_name }}' `
              --template-file ${{ github.workspace }}/deploy/$template --parameters $paramFile
          }
        shell: pwsh
